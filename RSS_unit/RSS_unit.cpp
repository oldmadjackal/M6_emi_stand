
#include <windows.h>
#include <stdlib.h>
#include <stdio.h>
#include <io.h>
#include <malloc.h>


#include "RSS_unit.h"

#pragma warning(disable : 4996)


BOOL APIENTRY DllMain( HANDLE hModule, 
                       DWORD  ul_reason_for_call, 
                       LPVOID lpReserved
					 )
{
    switch (ul_reason_for_call)
	{
		case DLL_PROCESS_ATTACH:
		case DLL_THREAD_ATTACH:
		case DLL_THREAD_DETACH:
		case DLL_PROCESS_DETACH:
			break;
    }
    return TRUE;
}


/*********************************************************************/
/*								     */
/*		      Компоненты класса "КОМПОНЕНТ"	             */
/*								     */
/*********************************************************************/

/*********************************************************************/
/*								     */
/*		       Конструктор класса "КОМПОНЕНТ"      	     */

     RSS_Unit::RSS_Unit(void)

{
     Owner=NULL ;
}


/*********************************************************************/
/*								     */
/*		        Деструктор класса "КОМПОНЕНТ"      	     */

    RSS_Unit::~RSS_Unit(void)

{
}

/********************************************************************/
/*								    */
/*                        Копировать объект		            */

    class RSS_Unit *RSS_Unit::vCopy(RSS_Object *owner)

{
   return(NULL) ;
}


/*********************************************************************/
/*								     */
/*	      Компоненты класса "КОМПОНЕНТ - БОЕВАЯ ЧАСТЬ"	     */
/*								     */
/*********************************************************************/

/*********************************************************************/
/*								     */
/*	       Конструктор класса "КОМПОНЕНТ - БОЕВАЯ ЧАСТЬ"         */

     RSS_Unit_WarHead::RSS_Unit_WarHead(void)

{
}


/*********************************************************************/
/*								     */
/*	        Деструктор класса "КОМПОНЕНТ - БОЕВАЯ ЧАСТЬ"  	     */

    RSS_Unit_WarHead::~RSS_Unit_WarHead(void)

{
}


/*********************************************************************/
/*								     */
/*              	        Инициирование БЧ          	     */

    int  RSS_Unit_WarHead::vSetWarHeadControl(char *regime)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*	      Компоненты класса "КОМПОНЕНТ - ГСН"       	     */
/*								     */
/*********************************************************************/

/*********************************************************************/
/*								     */
/*	       Конструктор класса "КОМПОНЕНТ - ГСН"                  */

     RSS_Unit_Homing::RSS_Unit_Homing(void)

{
}


/*********************************************************************/
/*								     */
/*	        Деструктор класса "КОМПОНЕНТ - ГСН"       	     */

    RSS_Unit_Homing::~RSS_Unit_Homing(void)

{
}


/*********************************************************************/
/*								     */
/*              	  Управление режимами ГСН         	     */

    int  RSS_Unit_Homing::vSetHomingControl(char *regime)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*              	  Направление на цель            	     */

    int  RSS_Unit_Homing::vGetHomingDirection(RSS_Point *direction)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*             	 Относительное положение цели           	     */

    int  RSS_Unit_Homing::vGetHomingPosition(RSS_Point *position)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*               	 Дистанция до цели                 	     */

    int  RSS_Unit_Homing::vGetHomingDistance(double *distance)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*               	 Скорость сближения с целью            	     */

    int  RSS_Unit_Homing::vGetHomingClosingSpeed(double *velocity)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*	      Компоненты класса "КОМПОНЕНТ - СУ"           	     */
/*								     */
/*********************************************************************/

/*********************************************************************/
/*								     */
/*	       Конструктор класса "КОМПОНЕНТ - СУ"                   */

     RSS_Unit_Control::RSS_Unit_Control(void)

{
}


/*********************************************************************/
/*								     */
/*	        Деструктор класса "КОМПОНЕНТ - СУ"       	     */

    RSS_Unit_Control::~RSS_Unit_Control(void)

{
}


/*********************************************************************/
/*								     */
/*              	  Направление на цель            	     */

    int  RSS_Unit_Control::vSetHomingDirection(RSS_Point *direction)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*             	 Относительное положение цели           	     */

    int  RSS_Unit_Control::vSetHomingPosition(RSS_Point *position)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*               	 Дистанция до цели                 	     */

    int  RSS_Unit_Control::vSetHomingDistance(double  distance)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*               	 Скорость сближения с целью            	     */

    int  RSS_Unit_Control::vSetHomingClosingSpeed(double  velocity)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*              	  Управление режимами БЧ         	     */

    int  RSS_Unit_Control::vGetWarHeadControl(char *regime)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*              	  Управление режимами ГСН         	     */

    int  RSS_Unit_Control::vGetHomingControl(char *regime)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*              	  Управление двигателем         	     */

    int  RSS_Unit_Control::vGetEngineControl(RSS_Unit_Engine_Control *engines)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*     	  Управление аэродинамическими поверхностями        	     */

    int  RSS_Unit_Control::vGetAeroControl(RSS_Unit_Aero_Control *aeros)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*                         Перегрузка маневра                        */

    int  RSS_Unit_Control::vGetVectorControl(RSS_Vector *vector)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*	      Компоненты класса "КОМПОНЕНТ - Двигатель"       	     */
/*								     */
/*********************************************************************/

/*********************************************************************/
/*								     */
/*	       Конструктор класса "КОМПОНЕНТ - Двигатель"            */

     RSS_Unit_Engine::RSS_Unit_Engine(void)

{
}


/*********************************************************************/
/*								     */
/*	        Деструктор класса "КОМПОНЕНТ - Двигатель"      	     */

    RSS_Unit_Engine::~RSS_Unit_Engine(void)

{
}


/*********************************************************************/
/*								     */
/*              	  Управление двигателем         	     */

    int  RSS_Unit_Engine::vSetEngineControl(RSS_Unit_Engine_Control *engines, int  engines_cnt)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*              	  Тяга двигателя                	     */

    int  RSS_Unit_Engine::vGetEngineThrust(RSS_Unit_Engine_Thrust *thrust)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*             	  Масса и положение центра масс двигателя            */

    int  RSS_Unit_Engine::vGetEngineMass(double *mass, RSS_Point *center)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*             	  Моменты инерции двигателя                          */

    int  RSS_Unit_Engine::vGetEngineMI(double *Ix, double *Iy, double *Iz)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*	      Компоненты класса "КОМПОНЕНТ - Модель"       	     */
/*								     */
/*********************************************************************/

/*********************************************************************/
/*								     */
/*	       Конструктор класса "КОМПОНЕНТ - Модель"               */

     RSS_Unit_Model::RSS_Unit_Model(void)

{
}


/*********************************************************************/
/*								     */
/*	        Деструктор класса "КОМПОНЕНТ - Модель"      	     */

    RSS_Unit_Model::~RSS_Unit_Model(void)

{
}


/*********************************************************************/
/*								     */
/*              Управление аэродинамическими поверхностями     	     */

    int  RSS_Unit_Model::vSetAeroControl(RSS_Unit_Aero_Control *aeros, int  aeros_cnt)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*                   Требуемая перегрузка маневра                    */


    int  RSS_Unit_Model::vSetVectorControl(RSS_Vector *vector)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*              	  Тяга двигателя                	     */

    int  RSS_Unit_Model::vSetEngineThrust(RSS_Unit_Engine_Thrust *thrust, int  thrust_cnt)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*             	  Масса и положение центра масс двигателя            */

    int  RSS_Unit_Model::vSetEngineMass(double  mass, RSS_Point *center)

{
   return(0) ;
}


/*********************************************************************/
/*								     */
/*             	  Моменты инерции двигателя                          */

    int  RSS_Unit_Model::vSetEngineMI(double  Ix, double  Iy, double  Iz)

{
   return(0) ;
}


